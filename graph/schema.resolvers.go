package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"
	"strconv"
	postModel "vijju/post/model"
	userModel "vijju/user/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*userModel.User, error) {
	return r.UserService.CreateUser(name, email)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name string, email string) (*userModel.User, error) {
	// idInt := uint((id))
	idInt, _ := strconv.Atoi(id)
	return r.UserService.UpdateUser(uint(idInt), name, email)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	idInt, _ := strconv.Atoi(id)
	err := r.UserService.DeleteUser(uint(idInt))
	return err == nil, err
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, userID string) (*postModel.Post, error) {
	idInt, _ := strconv.Atoi(userID)
	return r.PostService.CreatePost(title, content, uint(idInt))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, title string, content string) (*postModel.Post, error) {
	idInt, _ := strconv.Atoi(id)
	return r.PostService.UpdatePost(uint(idInt), title, content)
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (bool, error) {
	idInt, _ := strconv.Atoi(id)
	err := r.PostService.DeletePost(uint(idInt))
	return err == nil, err
}

// ID is the resolver for the id field.
func (r *postResolver) ID(ctx context.Context, obj *postModel.Post) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the userId field.
func (r *postResolver) UserID(ctx context.Context, obj *postModel.Post) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// User is the resolver for the user field.
func (r *postResolver) User(ctx context.Context, obj *postModel.Post) (*userModel.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*userModel.User, error) {
	idInt, _ := strconv.Atoi(id)
	return r.UserService.GetUser(uint(idInt))
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*userModel.User, error) {
	users, err := r.UserService.GetUsers()
	if err != nil {
		return nil, err
	}
	userPtrs := make([]*userModel.User, len(users))
	for i, user := range users {
		userPtrs[i] = &user
	}
	return userPtrs, nil
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, id string) (*postModel.Post, error) {
	idInt, _ := strconv.Atoi(id)
	return r.PostService.GetPost(uint(idInt))
}

// GetPosts is the resolver for the getPosts field.
func (r *queryResolver) GetPosts(ctx context.Context) ([]*postModel.Post, error) {
	posts, err := r.PostService.GetPosts()
	if err != nil {
		return nil, err
	}
	postPtrs := make([]*postModel.Post, len(posts))
	for i, post := range posts {
		postPtrs[i] = &post
	}
	return postPtrs, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *userModel.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *userResolver) Posts(ctx context.Context, obj *userModel.User) ([]*postModel.Post, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}
*/
